# How to use this text file
In January 2020, MCmatlab has undergone significant changes in how model files are built up.
- In the old version (Releases R), the media properties were independently defined in a separate file, while the model file was mostly using separate structs to define the different inputs of the simulation.
- In the new version, media properties are part of the model file, and there is one master-struct ("model = initializeMCmatlabModel") to hold all the inputs of the simulations.
In this file, you can read how to upgrade your old model files (R-version) to make use of the new features of the S-version of MCmatlab.

# How do I know which version of MCmatlab I have?
Check in any of the example files whether you have a function "function mediaProperties = mediaPropertiesFunc(wavelength,parameters)" at the end. If not, you have the old R-version, if yes, you have the new S-version.

# Specific changes to MCmatlab from the R version to the S version
all input and output information is stored in a "model" struct, which must be initialized using "model = initializeMCmatlabModel()"
if you want to clear the contents of a specific part of the model struct, you can use "model = clearMCmatlabModel(model,'G')", "model = clearMCmatlabModel(model,'MC')", "model = clearMCmatlabModel(model,'FMC')" or "model = clearMCmatlabModel(model,'HS')"

Ginput -> model.G
MCinput -> model.MC
FMCinput -> model.FMC
HSinput -> model.HS

matchedInterfaces and boundaryType is now specified (independently) in the MC and FMC structs rather than G
GeomFunc is now called geomFunc
GeomFuncParams is now called geomFuncParams
defineGeometry is now called as "model = defineGeometry(model)"
plotMCmatlabGeom is now called as "plotMCmatlabGeom(model)"

nPhotons as an input is now called nPhotonsRequested
simulationTime as an input is now called simulationTimeRequested
F, the output normalized fluence rate is now called NFR
Fdet, the output normalized fluence rate of collected light is now called NFRdet
calcF is now called calcNFR
calcFdet is now called calcNFRdet
farfieldRes is now called farFieldRes
the Beam struct is now called beam
a new beam definition method is used - see example 2
to enable a light collector you must now specify model.MC.useLightCollector = true;
the LightCollector struct is now called LC
FieldSize is now called fieldSize

runMonteCarlo is now called as "model = runMonteCarlo(model)"
plotMCmatlab should now be called as "plotMCmatlab(model)"
the image output is now stored in the LC struct

instead of runMonteCarloFluorescence, you should now use "model = runMonteCarlo(model,'fluorecscence')"
instead of plotMCmatlabFluorescence, you should now use "plotMCmatlab(model,'fluorescence')"

the excitation power is now stored in MC rather than in HS

initialTemp is now called Tinitial and can now be specified either as a scalar (constant temperature distribution) or a 3D array of initial temperatures
simulateHeatDistribution is now called as "model = simulateHeatDistribution(model)"
plotMCmatlabHeat is now called as "plotMCmatlabHeat(model)"

media properties can now optionally be specified as char array formulas that depend on the fluence rate (FR) of the excitation light, the temperature (T) and/or the fractional heat damage of the media (FD):
mua, mus, g and Y can depend on all the above parameters
VHC and TC can depend on T and FD but not FR
number of bins used to take these dependences into account is specified in the new nBins media property (see examples 12-15)
if necessary, an initial guess as to the fluence rate distribution in a cuboid with FR dependent media properties can be provided in the now FRinitial property of the MC struct, which will assist convergence in the iterative method
FRdepIterations in the MC struct specifies how many iterations should be used in such a case (see example 12). Defaults to 20

for simulations with T or FD dependent properties, the new mediaPropRecalcPeriod in the HS struct specifies how frequently the media properties should be recalculated (how many updates per recalculation)

a new input parameter, useGPU, now exists for the MC and FMC inputs to enable CUDA accelerated execution using Nvidia GPUs